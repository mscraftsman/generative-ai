using System.Diagnostics;

namespace Mscc.GenerativeAI
{
    /// <summary>
    /// A datatype containing media that is part of a multi-part Content message.
    /// A part of a turn in a conversation with the model with a fixed MIME type. 
    /// It has one of the following mutually exclusive fields: 
    ///     1. text 
    ///     2. inline_data 
    ///     3. file_data 
    ///     4. functionResponse 
    ///     5. functionCall
    /// </summary>
    [DebuggerDisplay("{Text}")]
    public class Part
    {
        public Part() { }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="text"></param>
        public Part(string text)
        {
            Text = text;
        }

        public Part(FileData fileData) : this()
        {
            FileData = fileData;
        }

        /// <summary>
        /// A text part of a conversation with the model.
        /// </summary>
        public string Text
        {
            get
            {
                var value = TextData?.Text;
                if (string.IsNullOrEmpty(value)) { value = ExecutableCode?.Code;}
                if (string.IsNullOrEmpty(value)) { value = CodeExecutionResult?.Output;}
                return value!;
            }
            set { TextData = new TextData { Text = value }; }
        }

        /// <remarks/>
        [DebuggerHidden]
        internal TextData TextData { get; set; }

        /// <summary>
        /// Raw media bytes sent directly in the request. 
        /// </summary>
        public InlineData InlineData { get; set; }

        /// <summary>
        /// URI based data.
        /// </summary>
        public FileData FileData { get; set; }

        /// <summary>
        /// The result output of a FunctionCall that contains a string representing the FunctionDeclaration.name and a structured JSON object containing any output from the function is used as context to the model.
        /// </summary>
        public FunctionResponse FunctionResponse { get; set; }

        /// <summary>
        /// A predicted FunctionCall returned from the model that contains a string representing the FunctionDeclaration.name with the arguments and their values.
        /// </summary>
        public FunctionCall FunctionCall { get; set; }

        /// <summary>
        /// Optional. For video input, the start and end offset of the video in Duration format.
        /// </summary>
        public VideoMetadata VideoMetadata { get; set; }

        /// <summary>
        /// Code generated by the model that is meant to be executed.
        /// </summary>
        public ExecutableCode ExecutableCode { get; set; }

        /// <summary>
        /// Result of executing the ExecutableCode.
        /// </summary>
        public CodeExecutionResult CodeExecutionResult { get; set; }

        /// <summary>
        /// Optional. Indicates if the part is thought from the model.
        /// </summary>
        public bool? Thought { get; set; }

        /// <summary>
        /// The ETag of the item.
        /// </summary>
        public virtual string? ETag { get; set; }

        // ToDo: Overloads for byte[] and Stream.
        public static InlineData FromBytes(string value, string mimeType)
        {
            if (string.IsNullOrEmpty(value)) return new InlineData();

            return new InlineData() { Data = value, MimeType = mimeType};
        }

        public static CodeExecutionResult FromCodeExecutionResult(Outcome outcome, string output)
        {
            return new CodeExecutionResult() { Outcome = outcome, Output = output };
        }

        public static ExecutableCode FromExecutableCode(string code, Language language)
        {
            if (string.IsNullOrEmpty(code)) return new ExecutableCode();

            return new ExecutableCode() { Code = code, Language = language };
        }

        public static FunctionCall FromFunctionCall(string name, string[] args)
        {
            if (string.IsNullOrEmpty(name)) return new FunctionCall();

            return new FunctionCall() { Name = name, Args = args };
        }

        public static FunctionResponse FromFunctionResponse(string name, dynamic response)
        {
            if (string.IsNullOrEmpty(name)) return new FunctionResponse();

            return new FunctionResponse() { Name = name, Response = response };
        }

        public static TextData FromText(string value)
        {
            if (string.IsNullOrEmpty(value)) return new TextData();

            return new TextData() { Text = value };
        }

        public static FileData FromUri(string uri, string mimetype)
        {
            return new FileData { FileUri = uri, MimeType = mimetype };
        }

        public static VideoMetadata FromVideoMetadata(Duration startOffset, Duration endOffset)
        {
            return new VideoMetadata() { StartOffset = startOffset, EndOffset = endOffset };
        }
    }

    /// <summary>
    /// A datatype containing data that is part of a multi-part `TuningContent` message.
    /// This is a subset of the Part used for model inference, with limited type support.
    /// A `Part` consists of data which has an associated datatype.
    /// A `Part` can only contain one of the accepted types in `Part.data`.
    /// </summary>
    [DebuggerDisplay("{Text}")]
    public class TuningPart : Part
    {
    }
}